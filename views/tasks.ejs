<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TASKE</title>
    <!-- CSS -->
    <link
      rel="preload"
      href="css/style.css"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <link rel="icon" href="uploads/portapapeles.png" type="image/png">

    <!-- Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Kanit:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
    <!-- Material symbols -->
    <link
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined"
      rel="stylesheet"
    />
    <script src="src/sidebar.js" defer></script>
  </head>

  <body>
    <div class="grid-container">
      <!-- Header -->
          <header class="header">
        <div class="menu-icon" onclick="openSidebar()">
          <span class="material-symbols-outlined">menu</span>
        </div>
        <div class="header-left">
          <!-- search bar -->
          <div class="search-bar center-form">
            <span class="material-symbols-outlined">search</span>
            <input type="text" placeholder="Search.." />
          </div>
        </div>
        <div class="header-right">
          <div class="dropdown">
            <span
              class="material-symbols-outlined"
              onclick="toggleDropdown('notifications-dropdown')"
              >notifications</span
            >
            <div class="dropdown-menu" id="notifications-dropdown">
              <p>No new notifications</p>
            </div>
          </div>
        
          <div class="dropdown">
            <span
              class="material-symbols-outlined"
              onclick="toggleDropdown('account-dropdown')"
              >account_circle</span
            >
            <div class="dropdown-menu" id="account-dropdown">
              <button  id=profileButton>Profile</button>
              <p><a href="/logout">Logout</a></p>
            </div>
          </div>
        </div>
      </header>
      <!-- Header End -->
      <!-- Sidebar  -->
      <aside id="sidebar">
        <div class="sidebar-title">
          <div class="sidebar-brand">
            <!-- task manager symbol -->
            <span class="material-symbols-outlined"> editor_choice </span>TASKE
          </div>
          <span class="material-symbols-outlined" onclick="closeSidebar()"
            >close</span
          >
        </div>
        <ul class="sidebar-list">
          <li class="sidebar-list-item">
            <a href="/home">
              <span class="material-symbols-outlined">dashboard</span> Dashboard
            </a>
          </li>
          <li class="sidebar-list-item">
            <a href="/tasks">
              <span class="material-symbols-outlined">inventory</span> Tasks
            </a>
          </li>
          <li class="sidebar-list-item">
            <a href="/projects">
              <span class="material-symbols-outlined">inventory_2</span>
              Projects
            </a>
          </li>
          <li class="sidebar-list-item">
            <a href="/settings">
              <span class="material-symbols-outlined">settings</span> Settings
            </a>
          </li>
        </ul>
      </aside>
      <!-- Sidebar End -->
      <!-- Main -->
      <main class="main-container overflow">
        <div class="projectfilter">
          <h2>PROJECT</h2>

          <select id="project-select">
            <% projects.forEach(project => { %>
            <option value="<%= project._id %>"><%= project.name %></option>
            <% });%>
          </select>
        </div>
        <div class="main-tasks">
          <div class="task-header" id="filterheader">
            <div class="task-title">
              <h2>TASKS</h2>
            </div>
            <div class="task-filter">
              <div
                class="filterbox"
                onclick="toggleFilter(this,'blue'); changefilter('alltasks');"
                id="startfilter"
              >
                <h4>All Tasks</h4>
              </div>
              <div
                class="filterbox"
                onclick="toggleFilter(this,'green'); changefilter('completed')"
              >
                <h4>Completed Tasks</h4>
              </div>
              <div
                class="filterbox"
                onclick="toggleFilter(this,'orange'); changefilter('incompleted')"
              >
                <h4>Incompleted Tasks</h4>
              </div>
              <div
                class="filterbox"
                onclick="toggleFilter(this,'red'); changefilter('notstarted')"
              >
                <h4>Not Started Tasks</h4>
              </div>
            </div>
          </div>
          <div class="task-list" id="taskList"></div>
        </div>
      </main>
      <!-- Main End -->
    </div>
    <script>
      const projectselect = document.getElementById("project-select");
      document.addEventListener("DOMContentLoaded", () => {
        toggleFilter(document.getElementById("startfilter"), "blue");
        const selectedoption =
          projectselect.options[projectselect.selectedIndex].value;

        fetchtasks(selectedoption);
      });
      function changefilter(filteroption) {
        const projectselect = document.getElementById("project-select");
        const selectedoption =
          projectselect.options[projectselect.selectedIndex].value;
        fetchtasks(selectedoption, filteroption);
      }
      function activeedittask(){
        
        document.getElementById("edittask").classList.toggle("active");
        //si se hace click fuera del dropdown, se cierra
        
      }
      function fetchtasks(selectedoption, filter) {
        fetch(`/tasks/user/${selectedoption}`)
          .then((res) => {
            if (!res.ok) {
              throw new Error("Network response was not ok");
            }
            return res.json();
          })
          .then((tasks) => {
            if (filter === "completed") {
              tasks = tasks.filter((task) => task.status === "completed");
            } else if (filter === "incompleted") {
              tasks = tasks.filter((task) => task.status === "incompleted");
            } else if (filter === "notstarted") {
              tasks = tasks.filter((task) => task.status === "not started");
            }
            const taskList = document.getElementById("taskList");
            taskList.innerHTML = "";
            taskList.innerHTML = `<div id="column_guide" class="task-list-header">
                  <h3>Task</h3>
                  <div class="task-list-header-right changewidth">
                    <h3>End Date</h3>
                    <h3>Status</h3>
                    <h3>Priority</h3>
                    <h3>Assignees</h3>
                    <h3>Edit</h3>
                  </div>
                </div>`;

            if (tasks.length === 0) {
              taskList.innerHTML =
                '<div class="center-form"><h3>No tasks found</h3></div>';
            } else {
              tasks.forEach((task) => {
                const taskDiv = document.createElement("div");
                taskDiv.classList.add("task-cuadro");
                taskDiv.innerHTML = `
                        <div class="task-list-header">
                            <h3>Task</h3>
                            <div class="task-list-header-right ">
                            <h3>End Date</h3>
                            <h3>Status</h3>
                            <h3>Priority</h3>
                            <h3>Assignees</h3>
                            <h3>Edit</h3>
                            </div>
                        </div>
                        <div class="task">
                            <h4>${task.name}</h4>
                            <div class="task-inner changewidth">
                                <h4>${
                                  task.enddate
                                    ? new Date(task.enddate)
                                        .toISOString()
                                        .split("T")[0]
                                    : "N/A"
                                }</h4>
                                <div class="task-status">
                                <h4>${task.status || "not started"}</h4>
                                </div>
                                <div class="task-priority">
                                <h4>${task.priority || "low"}</h4>
                                </div>     
                                <div class="center-form">     
                                <div class="member_circles">
                                <!-- Aquí irán las imágenes de los asignados -->
                                </div>
                                </div>
                                <div class="task-edit"">
x                                </div>
                            </div>
                        </div>
                    `;
                if (task.status === "completed") {
                  taskDiv.querySelector(".task").classList.add("green");
                }
                if (task.status === "incompleted") {
                  taskDiv.querySelector(".task").classList.add("orange");
                  dropdownedit = taskDiv.querySelector(".task-edit");
                  dropdownedit.innerHTML = `
                                <a href="/update/complete/${task._id}">
                                  <span class="material-symbols-outlined" style="color: green;"
                                  >check</span>  
                                </a>
                                `;
                }
                if (task.status === "not started") {
                  taskDiv.querySelector(".task").classList.add("red");
                  dropdownedit = taskDiv.querySelector(".task-edit");
                  dropdownedit.innerHTML = `
                                <a href="/update/start/${task._id}">
                                  <span class="material-symbols-outlined" style="color: green;"
                                  >play_arrow</span>  
                                </a>
                                `;
                }
                // se agregan imágenes de los assignedUsers
                const assigneeDiv = taskDiv.querySelector(".member_circles");
                if (task.assignedUsers && task.assignedUsers.length > 0) {
                  task.assignedUsers.forEach((user) => {
                    const assigneeImg = document.createElement("img");
                    assigneeImg.src = user.img;
                    assigneeImg.alt = user.name;
                    assigneeImg.style.width = "50px";
                    assigneeImg.style.height = "50px";
                    assigneeImg.title = user.name;
                    assigneeDiv.appendChild(assigneeImg);
                  });
                } else {
                  assigneeDiv.innerHTML += "<p>No assignees</p>";
                }

                taskList.appendChild(taskDiv);
              });
            }
          });
      }
      projectselect.addEventListener("change", (e) => {
        const selectedoption = e.target.options[e.target.selectedIndex].value;
        fetchtasks(selectedoption);
      });
    </script>
  </body>
</html>
