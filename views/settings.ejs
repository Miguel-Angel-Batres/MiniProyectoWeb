<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TASKE</title>
    <!-- CSS -->
    <link
      rel="preload"
      href="css/style.css"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <link rel="icon" href="uploads/portapapeles.png" type="image/png">

    <!-- Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Kanit:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
    <!-- Material symbols -->
    <link
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined"
      rel="stylesheet"
    />
    <script src="src/sidebar.js" defer></script>
  </head>

  <body>
    <div class="grid-container">
      <!-- Header -->
      <header class="header">
        <div class="menu-icon" onclick="openSidebar()">
          <span class="material-symbols-outlined">menu</span>
        </div>
        <div class="header-left">
          <!-- search bar -->
          <div class="search-bar center-form">
            <span class="material-symbols-outlined">search</span>
            <input type="text" placeholder="Search.." />
          </div>
        </div>
        <div class="header-right">
          <div class="dropdown">
            <span
              class="material-symbols-outlined"
              onclick="toggleDropdown('notifications-dropdown')"
              >notifications</span
            >
            <div class="dropdown-menu" id="notifications-dropdown">
              <p>No new notifications</p>
            </div>
          </div>
        
          <div class="dropdown">
            <span
              class="material-symbols-outlined"
              onclick="toggleDropdown('account-dropdown')"
              >account_circle</span
            >
            <div class="dropdown-menu" id="account-dropdown">
              <button  id=profileButton>Profile</button>
              <p><a href="/logout">Logout</a></p>
            </div>
          </div>
        </div>
      </header>
      <!-- Header End -->
      <!-- Sidebar  -->
      <aside id="sidebar">
        <div class="sidebar-title">
          <div class="sidebar-brand">
            <!-- task manager symbol -->
            <span class="material-symbols-outlined"> editor_choice </span>TASKE
          </div>
          <span class="material-symbols-outlined" onclick="closeSidebar()"
            >close</span
          >
        </div>
        <ul class="sidebar-list">
          <li class="sidebar-list-item">
            <a href="/home">
              <span class="material-symbols-outlined">dashboard</span> Dashboard
            </a>
          </li>
          <li class="sidebar-list-item">
            <a href="/tasks">
              <span class="material-symbols-outlined">inventory</span> Tasks
            </a>
          </li>
          <li class="sidebar-list-item">
            <a href="/projects">
              <span class="material-symbols-outlined">inventory_2</span>
              Projects
            </a>
          </li>
          <li class="sidebar-list-item">
            <a href="/settings">
              <span class="material-symbols-outlined">settings</span> Settings
            </a>
          </li>
        </ul>
      </aside>
      <!-- Sidebar End -->
      <!-- Main -->
      <main class="main-container" style="overflow-y: hidden">
        <div class="project-settings">
          <div class="main-title" style="padding-right: 20px">
            <div style="width: 120px"></div>
            <div class="projectfilter">
              <h2>PROJECT</h2>

              <select id="project-select">
                <% projects.forEach(project => { %>
                <option value="<%= project._id %>"><%= project.name %></option>
                <% });%>
              </select>
            </div>
            <button onclick="activeprofilesettings()">Profile Settings</button>
          </div>
          <div class="settings-container">
            <div class="settings">
              <div class="setting">
                <h2>Project Name</h2>
                <div>
                  <input type="text" id="project_name" />
                  <span
                    class="material-symbols-outlined edit-icon"
                    onclick="activeprojectnameedit()"
                    >edit</span
                  >
                </div>
              </div>
              <hr />
              <div class="setting">
                <h2>Project Description</h2>
                <div>
                  <input type="text" id="project_description" />
                  <span
                    class="material-symbols-outlined edit-icon"
                    onclick="activeprojectdescriptionedit()"
                    >edit</span
                  >
                </div>
              </div>
              <hr />
              <div class="center-form">
                <div class="image-container" style="padding: 20px">
                  <img
                    src=""
                    alt=""
                    style="width: 150px; height: 150px; border-radius: 75px"
                    id="projectsettingimage"
                  />
                  <label
                    for="projectsettingsimagefile"
                    class="edit-icon"
                    style="background-color: green"
                  >
                    <span class="material-symbols-outlined">edit</span>
                  </label>
                  <form
                    action="/changeprojectimage"
                    method="POST"
                    enctype="multipart/form-data"
                  >
                    <input
                      type="hidden"
                      class="project-id"
                      name="projectId"
                      value=""
                    />
                    <input
                      type="file"
                      id="projectsettingsimagefile"
                      name="projectimage"
                      accept="image/*"
                      required
                      hidden
                      onchange="this.form.submit()"
                    />
                  </form>
                </div>
              </div>
            </div>
            <div class="settings">
              <div class="setting">
                <h2>Project Members</h2>
                <div class="center-form">
                  <div class="member_circles" id="members_circles">
                    <img
                      src="https://www.w3schools.com/howto/img_avatar.png"
                      alt=""
                    />
                    <img
                      src="https://www.w3schools.com/howto/img_avatar.png"
                      alt=""
                    />
                  </div>
                  <span
                    class="material-symbols-outlined edit-icon"
                    onclick="activeprojectmembersedit()"
                    >edit</span
                  >
                </div>
              </div>
              <hr />
              <div class="setting">
                <h2>Project admins</h2>
                <div class="center-form">
                  <div class="member_circles" id="admin_circles">
                    <img
                      src="https://www.w3schools.com/howto/img_avatar.png"
                      alt=""
                    />
                    <img
                      src="https://www.w3schools.com/howto/img_avatar.png"
                      alt=""
                    />
                  </div>
                  <span
                    class="material-symbols-outlined edit-icon"
                    onclick="activeprojectadminsedit()"
                    >edit</span
                  >
                </div>
              </div>
              <hr />
              <div class="setting">
                <h2>Delete Project</h2>
                <div class="center-form">
                  <button onclick="activeprojectdelete()">Delete</button>
                </div>
              </div>

              <hr />
            </div>
          </div>
          <div></div>
        </div>
        <div class="profile-settings">
          <div class="center-form" style="margin: 20px 0px">
            <button onclick="activeprojectsettings()">Project Settings</button>
          </div>
          <div class="settings-container">
            <div class="settings">
              <div class="setting">
                <h2>Profile Name</h2>
                <div>
                  <input type="text" id="profile_name" />
                  <span
                    class="material-symbols-outlined edit-icon"
                    onclick="activeprofilenameedit()"
                    >edit</span
                  >
                </div>
              </div>
              <hr />
              <div class="setting">
                <h2>Profile Password</h2>
                <div>
                  <input type="password" id="profile_password" />
                  <span
                    class="material-symbols-outlined edit-icon"
                    onclick="activeprofilepasswordedit()"
                    >edit</span
                  >
                </div>
              </div>
              <hr />
              <div class="center-form" style="padding: 20px">
                <div class="image-container">
                  <img
                    src=""
                    alt=""
                    style="width: 150px; height: 150px; border-radius: 75px"
                    id="profilesettingimage"
                  />
                  <label
                    for="profilesettingsimagefile"
                    class="edit-icon"
                    style="background-color: green"
                  >
                    <span class="material-symbols-outlined">edit</span>
                  </label>

                  <form
                    action="/changeprofileimage"
                    method="POST"
                    enctype="multipart/form-data"
                  >
                    <input
                      type="file"
                      id="profilesettingsimagefile"
                      name="profileimage"
                      accept="image/*"
                      required
                      hidden
                      onchange="this.form.submit()"
                    />
                  </form>
                </div>
              </div>
            </div>
          </div>
          <div></div>
        </div>
        <div class="floating-settings" id="floating_settings">
          <div class="floating-content">
            <div id="editprojectname" style="display: none">
              <form action="/changeprojectname" method="POST">
                <div class="form-group">
                  <input
                    type="hidden"
                    class="project-id"
                    name="projectId"
                    value=""
                  />
                  <label for="oldname">Old Name</label>
                  <input type="text" id="oldprojectname" disabled />
                  <label for="newname">New Name</label>
                  <input
                    type="text"
                    id="newprojectname"
                    name="newprojectname"
                  />
                </div>
                <div class="center-form">
                  <button type="submit">Save</button>
                </div>
              </form>
            </div>
            <div id="editprojectdescription" style="display: none">
              <form action="/changeprojectdescription" method="POST">
                <div class="evenly column-form form-group">
                  <input
                    type="hidden"
                    class="project-id"
                    name="projectId"
                    value=""
                  />
                  <!-- old description -->
                  <label for="projectdescription"
                    >Old Project Description</label
                  >
                  <textarea
                    name="oldprojectdescription"
                    id="oldprojectdescription"
                    readonly
                  ></textarea>
                  <!-- new description -->
                  <label for="projectdescription"
                    >New Project Description</label
                  >
                  <textarea
                    name="projectdescription"
                    id="newprojectdescription"
                  ></textarea>
                </div>
                <div class="center-form">
                  <button type="submit">Save</button>
                </div>
              </form>
            </div>

            <div id="editprojectmembers" style="display: none">
              <div class="evenly search-bar">
                <!-- buscar usuario -->
                <label for="searchuser">
                  <span class="material-symbols-outlined">search</span>
                </label>
                <form action="/inviteuser" method="POST">
                  <input
                    type="hidden"
                    class="project-id"
                    name="projectId"
                    value=""
                  />
                  <input
                    list="users"
                    type="text"
                    name="username"
                    placeholder="Search User.."
                    style="width: 150px"
                  />
                  <datalist id="users"> </datalist>
                  <!-- invitar usuario -->
                  <button type="submit">
                    <span class="material-symbols-outlined">add</span>Invite
                  </button>
                </form>
              </div>

              <div
                class="member_circles separated_circles"
                style="
                  display: grid;
                  grid-template-columns: repeat(4, auto);
                  justify-content: space-between;
                  padding: 10px;
                  grid-row-gap: 20px;
                "
                id="members_circles_edit"
              >
                <div class="member_circle">
                  <img
                    src="https://www.w3schools.com/howto/img_avatar.png"
                    alt=""
                  />
                  <span class="material-symbols-outlined">delete</span>
                </div>
                <div class="member_circle">
                  <img
                    src="https://www.w3schools.com/howto/img_avatar.png"
                    alt=""
                  />
                  <span class="material-symbols-outlined">delete</span>
                </div>
                <div class="member_circle">
                  <img
                    src="https://www.w3schools.com/howto/img_avatar.png"
                    alt=""
                  />
                  <span class="material-symbols-outlined">delete</span>
                </div>
              </div>
            </div>
            <div id="editprojectadmins" style="display: none">
              <div class="evenly search-bar">
                <!-- buscar usuario -->
                <label for="searchuser">
                  <span class="material-symbols-outlined">search</span>
                </label>
                <form action="/makeadmin" method="POST">
                  <input
                    type="hidden"
                    class="project-id"
                    name="projectId"
                    value=""
                  />
                  <input
                    list="usersmembers"
                    type="text"
                    id="searchuser"
                    name="username"
                    placeholder="Search User.."
                    style="width: 150px"
                  />
                  <% projects.forEach(project => { %>
                  <!-- usuarios del proyecto -->
                  <datalist id="usersmembers">
                    <!-- filtrar por rol miembro -->
                    <% project.assignedUsers.forEach(user => { %> <%
                    if(user.role === "miembro") { %>
                    <option value="<%= user.userId.name %>">
                      <% } %> <% }); %>
                    </option>
                  </datalist>

                  <% }); %>
                  <!-- invitar usuario -->
                  <button type="submit">
                    <span class="material-symbols-outlined">add</span>Make Admin
                  </button>
                </form>
              </div>

              <div
                class="member_circles separated_circles"
                style="
                  display: grid;
                  grid-template-columns: repeat(4, auto);
                  justify-content: space-between;
                  padding: 10px;
                  grid-row-gap: 20px;
                "
                id="admin_circles_edit"
              >
                <div class="member_circle">
                  <img
                    src="https://www.w3schools.com/howto/img_avatar.png"
                    alt=""
                  />
                  <span class="material-symbols-outlined">delete</span>
                </div>
              </div>
            </div>

            <div id="editprofilename" style="display: none">
              <form action="/changeprofilename" method="POST">
                <div class="form-group">
                  <label for="oldname">Old Name</label>
                  <input type="text" id="oldname" disabled />
                  <label for="newname">New Name</label>
                  <input type="text" id="newname" name="newusername" />
                </div>
                <div class="center-form">
                  <button type="submit">Save</button>
                </div>
              </form>
            </div>
            <div id="editprofilepassword" style="display: none">
              <form action="/changeprofilepassword" method="POST">
                <div class="form-group">
                  <label for="oldpassword">Old Password</label>
                  <input type="password" id="oldpassword" name="oldpassword" />
                  <label for="newpassword">New Password</label>
                  <input type="password" id="newpassword" name="newpassword" />
                  <label for="confirmpassword">Confirm Password</label>
                  <input type="password" id="confirmpassword" />
                </div>
                <div class="center-form">
                  <button onclick="">Save</button>
                </div>
              </form>
            </div>
            <div id="editdeleteproject" style="display: none;">
              <form action="/deleteproject" method="POST">
                <input
                  type="hidden"
                  class="project-id"
                  name="projectId"
                  value="">
                <div class="evenly">
                  <h2>Are you sure that you want to delete this project?</h2>
                </div>
                <div class="center-form">
                  <button type="submit">Yes</button>
                  <button onclick="closeFloating()" type="reset">No</button>
                </div>
              </form>
            </div>
          </div>

          <div class="closebutton">
            <span class="material-symbols-outlined" onclick="closeFloating()"
              >close</span
            >
          </div>
        </div>
      </main>
      <!-- Main End -->
      <script>
          // Verifica si hay un parámetro 'profile=true' en la URL
          const urlParams = new URLSearchParams(window.location.search);
          const isProfile = urlParams.get('profile') === 'true';

          // Si es true, activa la configuración del perfil
          if (isProfile) {
            window.addEventListener('load', function () {
              activeprofilesettings();
            });
          }
        const projectSelect = document.getElementById("project-select");
        function activeprojectdelete() {
          document.getElementById("floating_settings").style.display = "flex";
          document.getElementById("editdeleteproject").style.display = "block";
        }
        function activeprojectnameedit() {
          document.getElementById("floating_settings").style.display = "flex";
          document.getElementById("editprojectname").style.display = "block";
        }
        function activeprojectdescriptionedit() {
          document.getElementById("floating_settings").style.display = "flex";
          document.getElementById("editprojectdescription").style.display =
            "block";
        }
        function activeprojectmembersedit() {
          document.getElementById("floating_settings").style.display = "flex";
          document.getElementById("editprojectmembers").style.display = "block";
        }
        function activeprojectadminsedit() {
          document.getElementById("floating_settings").style.display = "flex";
          document.getElementById("editprojectadmins").style.display = "block";
        }
        function activeprofilenameedit() {
          document.getElementById("floating_settings").style.display = "flex";
          document.getElementById("editprofilename").style.display = "block";
        }
        function activeprofilepasswordedit() {
          document.getElementById("floating_settings").style.display = "flex";
          document.getElementById("editprofilepassword").style.display =
            "block";
        }
        function closeFloating() {
          document.getElementById("floating_settings").style.display = "none";
          document.getElementById("editprojectname").style.display = "none";
          document.getElementById("editprojectdescription").style.display =
            "none";
          document.getElementById("editprojectmembers").style.display = "none";
          document.getElementById("editprojectadmins").style.display = "none";
          document.getElementById("editprofilename").style.display = "none";
          document.getElementById("editprofilepassword").style.display = "none";
          document.getElementById("editdeleteproject").style.display = "none";
        }

        function activeprofilesettings() {
          document.querySelector(".project-settings").classList.add("inactive");
          document.querySelector(".profile-settings").classList.add("active");
        }
        function activeprojectsettings() {
          document
            .querySelector(".project-settings")
            .classList.remove("inactive");
          document
            .querySelector(".profile-settings")
            .classList.remove("active");
        }
        function cambiarimagenysubir() {
          document.getElementById("profilesettingsimagefile");
        }
        document.addEventListener("DOMContentLoaded", () => {
          const projectId = projectSelect.value;
          const projectIds = document.querySelectorAll(".project-id");
          projectIds.forEach((projectId) => {
            projectId.value = projectSelect.value;
          });
          changevalues(projectId);
          projectSelect.addEventListener("change", (event) => {
            const projectId = event.target.value;
            projectIds.forEach((projectId) => {
              projectId.value = projectSelect.value;
            });
            changevalues(projectId);
          });

          fetch(`/profile/settings`)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Failed to fetch user data");
              }
              return response.json();
            })
            .then((user) => {
              document.getElementById("profile_name").value = user.name || "";
              document.getElementById("oldname").value = user.name || "";
              document.getElementById("profile_password").value =
                "examplepassword";

              const profileImage = document.getElementById(
                "profilesettingimage"
              );
              if (user.img) {
                profileImage.src = user.img;
                profileImage.alt = user.name;
              } else {
                profileImage.src = "";
                profileImage.alt = "No image";
              }
            });
        });
        function changevalues(projectId) {
          fetch(`/settings/${projectId}`)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Failed to fetch project data");
              }
              return response.json();
            })
            .then((data) => {
              console.log("Usuarios:", data.users);
              const usersmembers = document.getElementById("users");
              usersmembers.innerHTML = "";
              data.users.forEach((user) => {
                const option = document.createElement("option");
                option.value = user.name;
                usersmembers.appendChild(option);
              });
            });

          fetch(`/projects/${projectId}`)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Failed to fetch project data");
              }
              return response.json();
            })
            .then((project) => {
              document.getElementById("project_name").value =
                project.name || "";
              document.getElementById("oldprojectname").value =
                project.name || "";
              document.getElementById("project_description").value =
                project.description || "";
              document.getElementById("oldprojectdescription").value =
                project.description || "";

              const projectImage = document.getElementById(
                "projectsettingimage"
              );
              if (project.image) {
                projectImage.src = project.image;
                projectImage.alt = project.name;
              } else {
                projectImage.src = "";
                projectImage.alt = "No image";
              }

              const members = project.assignedUsers;
              const admins = project.assignedUsers.filter(
                (user) => user.role === "admin"
              );

              const memberCircles = document.getElementById("members_circles");
              memberCircles.innerHTML = "";
              if (members.length > 0) {
                const maxDisplay = 4;

                members.slice(0, maxDisplay).forEach((assignedUser) => {
                  const imageUser = document.createElement("img");
                  imageUser.src =
                    assignedUser.userId.img ||
                    "https://www.w3schools.com/howto/img_avatar.png";
                  imageUser.alt = assignedUser.userId.name || "User";
                  imageUser.title = assignedUser.userId.name;
                  memberCircles.appendChild(imageUser);
                });

                if (members.length > maxDisplay) {
                  const extraCount = members.length - maxDisplay;

                  const extraImage = document.createElement("div");
                  extraImage.classList.add("extra-members");
                  extraImage.textContent = `+${extraCount}`;
                  memberCircles.appendChild(extraImage);
                }
              } else {
                memberCircles.innerHTML = "<p>No members assigned</p>";
              }
              const editmembercircle = document.getElementById(
                "members_circles_edit"
              );
              editmembercircle.innerHTML = "";
              if (members.length > 0) {
                members.forEach((assignedUser) => {
                  const memberCircle = document.createElement("div");
                  memberCircle.classList.add("member_circle");
                  const imageUser = document.createElement("img");
                  imageUser.src =
                    assignedUser.userId.img ||
                    "https://www.w3schools.com/howto/img_avatar.png";
                  imageUser.alt = assignedUser.userId.name || "User";
                  imageUser.title = assignedUser.userId.name;
                  memberCircle.appendChild(imageUser);
                  const deleteIcon = document.createElement("span");
                  deleteIcon.classList.add("material-symbols-outlined");
                  deleteIcon.textContent = "delete";
                  deleteIcon.onclick = () => {
                    fetch(`/projects/${projectId}/removeuser`, {
                      method: "POST",
                      headers: {
                        "Content-Type": "application/json",
                      },
                      body: JSON.stringify({
                        userId: assignedUser.userId._id,
                      }),
                    })
                    .then(response => response.json())
                      .then(data => {
                          if (data.success) {  
                              alert(data.message);
                              location.reload(); 
                          } else {
                              alert(data.message);
                               
                          }
                      })

                      
                      .catch(error => {
                          console.error('Error at user delete', error);
                      });
                  };
                  memberCircle.appendChild(deleteIcon);
                  editmembercircle.appendChild(memberCircle);
                });
              } else {
                editmembercircle.innerHTML = "<p>No members assigned</p>";
              }
              const editadmincircle =
                document.getElementById("admin_circles_edit");
              editadmincircle.innerHTML = "";
              if (admins.length > 0) {
                admins.forEach((assignedUser) => {
                  const adminCircle = document.createElement("div");
                  adminCircle.classList.add("member_circle");
                  const imageAdmin = document.createElement("img");
                  imageAdmin.src =
                    assignedUser.userId.img ||
                    "https://www.w3schools.com/howto/img_avatar.png";
                  imageAdmin.alt = assignedUser.userId.name || "Admin";
                  imageAdmin.title = assignedUser.userId.name;
                  adminCircle.appendChild(imageAdmin);
                  const deleteIcon = document.createElement("span");
                  deleteIcon.classList.add("material-symbols-outlined");
                  deleteIcon.textContent = "delete";
                  deleteIcon.onclick = () => {
                    fetch(`/projects/${projectId}/removeadmin`, {
                      method: "POST",
                      headers: {
                        "Content-Type": "application/json",
                      },
                      body: JSON.stringify({
                        userId: assignedUser.userId._id,
                      }),
                    })
                      .then((response) => {
                        if (!response.ok) {
                          throw new Error(
                            `Failed to remove admin: ${response.statusText}`
                          );
                        }
                        return response.text();
                      })
                      .then((data) => {
                        console.log("Respuesta del servidor:", data);
                        try {
                          const jsonData = JSON.parse(data);
                          console.log("JSON parseado correctamente:", jsonData);
                          changevalues(projectId);
                        } catch (err) {
                          console.error("Error al parsear JSON:", err);
                        }
                      })
                      .catch((error) => {
                        console.error("Error removing admin:", error);
                      });
                  };
                  adminCircle.appendChild(deleteIcon);
                  editadmincircle.appendChild(adminCircle);
                });
              } else {
                editadmincircle.innerHTML = "<p>No admins assigned</p>";
              }
              const adminCircles = document.getElementById("admin_circles");
              adminCircles.innerHTML = "";
              if (admins.length > 0) {
                const maxDisplay = 4;

                admins.slice(0, maxDisplay).forEach((assignedUser) => {
                  const imageAdmin = document.createElement("img");
                  imageAdmin.src =
                    assignedUser.userId.img ||
                    "https://www.w3schools.com/howto/img_avatar.png";
                  imageAdmin.alt = assignedUser.userId.name || "Admin";
                  imageAdmin.title = assignedUser.userId.name;
                  adminCircles.appendChild(imageAdmin);
                });

                if (admins.length > maxDisplay) {
                  const extraCount = admins.length - maxDisplay;

                  const extraImage = document.createElement("div");
                  extraImage.classList.add("extra-members");
                  extraImage.textContent = `+${extraCount}`;
                  adminCircles.appendChild(extraImage);
                }
              } else {
                adminCircles.innerHTML = "<p>No admins assigned</p>";
              }
            })
            .catch((error) => {
              console.error("Error fetching project data:", error);
            });
        }
      </script>
    </div>
  </body>
</html>
